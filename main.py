# main file with step by step bitcoin address generation

import sys
import secrets
from elliptic_curve import EllipticCurve, Point
from type_encodings import int_to_hex_zfill, hex_to_int
from address_conversions import convert_private_key, convert_public_key


def main():
    # set bitcoin curve parameters (secp256k1)
    p = 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F'
    p = hex_to_int(p)  # 115792089237316195423570985008687907853269984665640564039457584007908834671663
    ord_EC = 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141'
    ord_EC = hex_to_int(ord_EC)  # 115792089237316195423570985008687907852837564279074904382605163141518161494337
    a = '00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000'
    a = hex_to_int(a)  # 0
    b = '00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000007'
    b = hex_to_int(b)  # 7
    # initialize the elliptic curve
    EC = EllipticCurve(p, ord_EC, a, b)

    # set the base point G (generator of the group of the points on the elliptic curve) coordinates x and y
    Gx = '79BE667E F9DCBBAC 55A06295 CE870B07 029BFCDB 2DCE28D9 59F2815B 16F81798'
    Gx = hex_to_int(Gx)  # 55066263022277343669578718895168534326250603453777594175500187360389116729240
    Gy = '483ADA77 26A3C465 5DA4FBFC 0E1108A8 FD17B448 A6855419 9C47D08F FB10D4B8'
    Gy = hex_to_int(Gy)  # 32670510020758816978083085130507043184471273380659243275938904335757337482424
    # initialize base point G
    G = Point(Gx, Gy, EC)

    print("--------------PRIVATE KEY--------------")
    # by default private key is generated by python built-in secrets module
    private_key = int(secrets.randbits(256))

    # alternative 1 - if you have a truly random number from range
    # (1, 115792089237316195423570985008687907852837564279074904382605163141518161494337)
    # you can also uncoment the following line and use your own random number here
    # private_key = 42504016558749422774059180843942823637401082602255195587126267238111651423494

    # alternative 2 - you can also pass it via command "python main.py private_key" if you uncomment the following line
    # private_key = int(sys.argv[1])

    # convert and print private key in all formats
    convert_private_key(private_key)

    print("--------------PUBLIC KEY--------------")
    # perform elliptic curve scalar multiplication to get the public key
    public_point = private_key * G

    # convert and print public key in all formats
    convert_public_key(public_point)
    print("---------------------------------------")


if __name__ == "__main__":
    main()

